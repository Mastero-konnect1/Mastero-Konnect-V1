// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}


// Validate ../../app/account-settings/page.tsx
{
  const handler = {} as typeof import("../../app/account-settings/page.js")
  handler satisfies AppPageConfig<"/account-settings">
}

// Validate ../../app/ai-assessment/page.tsx
{
  const handler = {} as typeof import("../../app/ai-assessment/page.js")
  handler satisfies AppPageConfig<"/ai-assessment">
}

// Validate ../../app/ai-recommendation/page.tsx
{
  const handler = {} as typeof import("../../app/ai-recommendation/page.js")
  handler satisfies AppPageConfig<"/ai-recommendation">
}

// Validate ../../app/auth/reset-password/page.tsx
{
  const handler = {} as typeof import("../../app/auth/reset-password/page.js")
  handler satisfies AppPageConfig<"/auth/reset-password">
}

// Validate ../../app/auth/sign-in/page.tsx
{
  const handler = {} as typeof import("../../app/auth/sign-in/page.js")
  handler satisfies AppPageConfig<"/auth/sign-in">
}

// Validate ../../app/auth/sign-up/page.tsx
{
  const handler = {} as typeof import("../../app/auth/sign-up/page.js")
  handler satisfies AppPageConfig<"/auth/sign-up">
}

// Validate ../../app/connect-mentor/[id]/page.tsx
{
  const handler = {} as typeof import("../../app/connect-mentor/[id]/page.js")
  handler satisfies AppPageConfig<"/connect-mentor/[id]">
}

// Validate ../../app/feedback-rewards/[id]/page.tsx
{
  const handler = {} as typeof import("../../app/feedback-rewards/[id]/page.js")
  handler satisfies AppPageConfig<"/feedback-rewards/[id]">
}

// Validate ../../app/find-mentor/page.tsx
{
  const handler = {} as typeof import("../../app/find-mentor/page.js")
  handler satisfies AppPageConfig<"/find-mentor">
}

// Validate ../../app/mentor/[id]/page.tsx
{
  const handler = {} as typeof import("../../app/mentor/[id]/page.js")
  handler satisfies AppPageConfig<"/mentor/[id]">
}

// Validate ../../app/page.tsx
{
  const handler = {} as typeof import("../../app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../app/profile-building/page.tsx
{
  const handler = {} as typeof import("../../app/profile-building/page.js")
  handler satisfies AppPageConfig<"/profile-building">
}







// Validate ../../app/layout.tsx
{
  const handler = {} as typeof import("../../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
